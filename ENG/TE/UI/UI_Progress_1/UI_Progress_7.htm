<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en" prefix="dc: http://purl.org/dc/elements/1.1/">
<head><meta name="author" content="Created with Hot Potatoes by Half-Baked Software, registered to mcold."/><meta name="keywords" content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"/>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>

<meta name="dc:creator" content="mcold" />
<meta name="dc:title" content="UI_Progress_7" />


<!-- Find-it type 2 for Hot Potatoes v7 -->
<!-- Modification by Agn&#195;&#168;s Simonet, January 2020 -->
<!-- from -->

<!-- Modification Copyright (c) Michael Rottmeier, January 2004 -->
<!-- Find-it - Version 3.1b for Hot Potatoes v6 -->
<!-- http://www.teaching-tools.de.vu -->
<!-- THIS HEADER MUST STAY UN-TOUCHED -->


<title>
UI_Progress_7
</title>

<!-- Made with executable version 7.0 Release 3 Build 0 -->

<!-- The following insertion allows you to add your own code directly to this head tag from the configuration screen -->



<style>


/* This is the CSS stylesheet used in the exercise. */
/* Elements in square brackets are replaced by data based on configuration settings when the exercise is built. */

/* BeginCorePageCSS */

/* Made with executable version 7.0 Release 3 Build 0 */



/* CSS variables for colours. */
:root{
	--strFontFace:       Geneva,Arial,sans-serif;
	--strFontSize:       medium;
	--strTextColor:      #000000;
	--strTitleColor:     #000000;

	--strFuncLightColor: #ffffff;
	--strFuncShadeColor: #7f7f7f;
	--strLinkColor:      #0000FF;
	--strVLinkColor:     #0000CC;
	
	--strNavBarColor:    #000000;
	--strNavLightColor:  #7f7f7f;
	--strNavShadeColor:  #000000;
	--strNavTextColor:   #ffffff;
	
	--strPageBGColor:    #C0C0C0;
	--strExBGColor:      #FFFFFF;
}

body{
	font-family: var(--strFontFace);
	background-color: var(--strPageBGColor);
	color: var(--strTextColor);
 
	margin-right: 5%;
	margin-left: 5%;
	font-size: var(--strFontSize);
	padding-bottom: 0.5em;
}

p{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

table,div,span,td{
	font-size: 1em;
	color: var(--strTextColor);
}

div.Titles{
	padding: 0.5em;;
	text-align: center;
	color: var(--strTitleColor);
}

button{
	font-family: var(--strFontFace);
	font-size: 1em;
	display: inline;
}

.ExerciseTitle{
	font-size: 140%;
	color: var(--strTitleColor);
}

.ExerciseSubtitle{
	font-size: 120%;
	color: var(--strTitleColor);
}

div.StdDiv, div.ExerciseContainer, div.ReadingContainer{
	background-color: var(--strExBGColor);
	text-align: center;
	font-size: 1em;
	color: var(--strTextColor);
	padding: 0.5em;
	border-style: solid;
	border-width: 1px 1px 1px 1px;
	border-color: var(--strTextColor);
	margin-bottom: 1px;
}

div.ReadingContainer, div.ExerciseContainer{
	min-width: 15em;
	flex-grow: 1;
	flex-basis: 0;
	margin: 1px;
}

div#ContainerDiv{
	margin: -1px;
	padding: 0;
	border: none;
	display: flex;
	flex-direction: row;
	flex-wrap: wrap;
	justify-content: space-between;
}

/* EndCorePageCSS */

.RTLText{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

.CentredRTLText{
	text-align: center;
	font-size: 150%;
	direction: rtl;
	font-family: "Simplified Arabic", "Traditional Arabic", "Times New Roman", var(--strFontFace); 
}

button p.RTLText{
	text-align: center;
}

.RTLGapBox{
	text-align: right;
	font-size: 150%;
	direction: rtl;
	font-family: "Times New Roman", var(--strFontFace);
}

.Guess{
	font-weight: bold;
}

.CorrectAnswer{
	font-weight: bold;
}

div#Timer{
	padding: 0.25em;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
	color: var(--strTitleColor);
}

span#TimerText{
	padding: 0.25em;
	border-width: 1px;
	border-style: solid;
	font-weight: bold;
	display: none;
	color: var(--strTitleColor);
}

span.Instructions{

}

div.ExerciseText{

}

.FeedbackText, .FeedbackText span.CorrectAnswer, .FeedbackText span.Guess, .FeedbackText span.Answer{
	color: var(--strTitleColor);
}

.LeftItem{
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

.RightItem{
	font-weight: bold;
	font-size: 1em;
	color: var(--strTextColor);
	text-align: left;
}

span.CorrectMark{

}

input, textarea{
	font-family: var(--strFontFace);
	font-size: 120%;
}

select{
	font-size: 1em;
}

div.Feedback {
	background-color: var(--strPageBGColor);
	left: 33%;
	width: 34%;
	top: 33%;
	z-index: 1;
	border-style: solid;
	border-width: 1px;
	padding: 5px;
	text-align: center;
	color: var(--strTitleColor);
	position: absolute;
	display: none;
	font-size: 1em;
}




div.ExerciseDiv{
	color: var(--strTextColor);
}

/* JMatch standard output table. */
table.MatchTable{
	margin: 2em auto; 
	border-width: 0;
}

/* JMatch flashcard styles */
table.FlashcardTable{
	background-color: transparent;
	color: var(--strTextColor);
	border-color: var(--strTextColor);
	margin-left: auto;
	margin-right: auto;
	margin-top: 2em;
	margin-bottom: 2em;
	/*width: 90%;*/
	position: relative;
	text-align: center;
	padding: 0px;
}

table.FlashcardTable tr{
	border-style: none;
	margin: 0px;
	padding: 0px;
	background-color: var(--strExBGColor);
}

table.FlashcardTable td.Showing{
	font-size: 140%;
	text-align: center;
	width: 50%;
	display: table-cell;
	padding: 2em;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
	background-color: var(--strPageBGColor);
}

table.FlashcardTable td.Hidden{
	display: none;
}

/* JMix styles */
div.JMixDrag, div.JMatchDrag{
	padding: 0;
	background-color: var(--strPageBGColor);
	border-style: none;
}

div#GuessDiv{
	padding: 0.5em;
	margin-bottom: 2em;
}

div#SegmentDiv{
	margin-top: 2em;
	margin-bottom: 2em;
	text-align: center;
}

a.ExSegment{
	font-size: 120%;
	font-weight: bold;
	text-decoration: none;
	color: var(--strTextColor);
	display: inline-block;
	padding: 0.5em;
	border: solid 1pt gray;
	margin-bottom: 0.5em;
}

span.RemainingWordList{
	font-style: italic;
}

div.DropLine {
	position: absolute;
	text-align: left;
	border-bottom-style: solid;
	border-bottom-width: 1px;
	border-bottom-color: var(--strTitleColor);
	width: 80%;
	left: 10%;
}

/* JCloze styles */

.ClozeWordList{
	text-align: center;
	font-weight: bold;
}

div.ClozeBody{
	text-align: left;
	margin-top: 2em;
	margin-bottom: 2em;
	line-height: 2.0
}

span.GapSpan{
	font-weight: bold;
}

/* JCross styles */

table.CrosswordGrid{
	margin: auto auto 1em auto;
	border-collapse: collapse;
	padding: 0px;
	background-color: #000000;
}

table.CrosswordGrid tbody tr td{
	width: 1.5em;
	height: 1.5em;
	text-align: center;
	vertical-align: middle;
	font-size: 140%;
	padding: 1px;
	margin: 0px;
	border-style: solid;
	border-width: 1px;
	border-color: #000000;
	color: #000000;
}

table.CrosswordGrid span{
	color: #000000;
}

table.CrosswordGrid td.BlankCell{
	background-color: #000000;
	color: #000000;
}

table.CrosswordGrid td.LetterOnlyCell{
	text-align: center;
	vertical-align: middle;
	background-color: #ffffff;
	color: #000000;
	font-weight: bold;
}

table.CrosswordGrid td.NumLetterCell{
	text-align: left;
	vertical-align: top;
	background-color: #ffffff;
	color: #000000;
	padding: 1px;
	font-weight: bold;
}

.NumLetterCellText{
	cursor: pointer;
	color: #000000;
}

.GridNum{
	vertical-align: super;
	font-size: 66%;
	font-weight: bold;
	text-decoration: none;
	color: #000000;
}

.GridNum:hover, .GridNum:visited{
	color: #000000;
}

table#Clues{
	margin: auto;
	vertical-align: top;
}

table#Clues td{
	vertical-align: top;
}

table.ClueList{
  margin: auto;
}

td.ClueNum{
	text-align: right;
	font-weight: bold;
	vertical-align: top;
}

td.Clue{
	text-align: left;
}

div#ClueEntry{
	text-align: left;
	margin-bottom: 1em;
}

/* Keypad styles */

div.Keypad{
	text-align: center;
	display: none; /* initially hidden, shown if needed */
	margin-bottom: 0.5em;
}

div.Keypad button{
	font-family: var(--strFontFace);
	font-size: 120%;
	background-color: #ffffff;
	color: #000000;
	width: 2em;
	border-style: solid;
	border-width: 1px;
	border-radius: 0.5em;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
}

/* JQuiz styles */

div.QuestionNavigation{
	text-align: center;
}

.QNum{
	margin: 0em 1em 0.5em 1em;
	font-weight: bold;
	vertical-align: middle;
}

textarea{
	font-family: var(--strFontFace);
}

.QuestionText{
	text-align: left;
	margin: 0px;
	font-size: 1em;
}

.Answer{
	font-size: 120%;
}

.PartialAnswer{
	font-size: 120%;
	letter-spacing: 0.1em;
	color: var(--strTitleColor);
}

.Highlight{
	color: #000000;
	background-color: #ffff00;
	font-weight: bold;
	font-size: 120%;
}

ol.QuizQuestions{
	text-align: left;
	list-style-type: none;
}

li.QuizQuestion{
	padding: 1em;
	border-style: solid;
	border-width: 0px 0px 1px 0px;
}

ol.MCAnswers{
	text-align: left;
	list-style-type: upper-alpha;
	padding: 1em;
}

ol.MCAnswers li{
	margin-bottom: 1em;
}

ol.MSelAnswers{
	text-align: left;
	list-style-type: lower-alpha;
	padding: 1em;
}

div.ShortAnswer{
	padding: 1em;
}

.FuncButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;

	border-left-color: var(--strFuncLightColor);
	border-top-color: var(--strFuncLightColor);
	border-right-color: var(--strFuncShadeColor);
	border-bottom-color: var(--strFuncShadeColor);
	color: var(--strTextColor);
	background-color: var(--strExBGColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
}

.FuncButton:active {
	box-shadow: none;
}

.FuncButton:hover{
	color: var(--strExBGColor);
	background-color: var(--strTextColor);
}

/*BeginNavBarStyle*/

div.NavButtonBar{
	background-color: var(--strNavBarColor);
	text-align: center;
	margin: 0.25rem 0;
	clear: both;
	font-size: 1em;
	padding: 0.2em;
	box-sizing: border-box;
}

.NavButton {
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 3em;
	
	border-left-color: var(--strNavLightColor);
	border-top-color: var(--strNavLightColor);
	border-right-color: var(--strNavShadeColor);
	border-bottom-color: var(--strNavShadeColor); 
	background-color: var(--strNavBarColor);
	color: var(--strNavTextColor);

	border-width: 1pt;
	cursor: pointer;	
	box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
}

.NavButton:active {
	box-shadow: none;
}

.NavButton:hover{
	color: var(--strNavBarColor);
	background-color: var(--strNavTextColor);
}

/*EndNavBarStyle*/

a{
	color: var(--strLinkColor);
}

a:visited{
	color: var(--strVLinkColor);
}

a:hover{
	color: var(--strLinkColor);
}

div.CardStyle {
	position: absolute;
	font-family: var(--strFontFace);
	font-size: 1em;
	border-style: solid;
	border-radius: 0.5em;
	padding: 0.5em;
	min-width: 2em;
	border-width: 1pt;
	color: var(--strTextColor);
	box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
	background-color: var(--strExBGColor);
	left: -50px;
	top: -50px;
	overflow: visible;
	touch-action: none;
	user-select: none;
	box-sizing: border-box;
}

div.CardStyleCentered{
	text-align: center;
}

.rtl{
	text-align: right;
	font-size: 140%;
}


span.GapSpan {
	font-weight: normal;
	cursor: pointer;
	}
span.GapSpanCorrect {
	color: green;
	}
</style>

<script>

//<![CDATA[

<!--




//CODE FOR HANDLING NAV BUTTONS AND FUNCTION BUTTONS

function FocusAButton(){
	if (document.getElementById('CheckButton1') != null){
		document.getElementById('CheckButton1').focus();
	}
	else{
		if (document.getElementById('CheckButton2') != null){
			document.getElementById('CheckButton2').focus();
		}
		else{
			document.getElementsByTagName('button')[0].focus();
		}
	}
}




//CODE FOR HANDLING DISPLAY OF POPUP FEEDBACK BOX

var topZ = 1000;

function ShowMessage(Feedback){
	var Output = Feedback + '<br /><br />';
	document.getElementById('FeedbackContent').innerHTML = Output;
	var FDiv = document.getElementById('FeedbackDiv');
	topZ++;
	FDiv.style.zIndex = topZ;
	FDiv.style.top = TopSettingWithScrollOffset(30) + 'px';

	FDiv.style.display = 'block';

	ShowElements(false, 'input');
	ShowElements(false, 'select');
	ShowElements(false, 'object');
	ShowElements(true, 'object', 'FeedbackContent');

//Focus the OK button
	setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
	
//
}

function ShowElements(Show, TagName, ContainerToReverse){
// added third argument to allow objects in the feedback box to appear
//IE bug -- hide all the form elements that will show through the popup
//FF on Mac bug : doesn't redisplay objects whose visibility is set to visible
//unless the object's display property is changed

	//get container object (by Id passed in, or use document otherwise)
	TopNode = document.getElementById(ContainerToReverse);
	var Els;
	if (TopNode != null) {
		Els = TopNode.getElementsByTagName(TagName);
	} else {
		Els = document.getElementsByTagName(TagName);
	}

	for (var i=0; i<Els.length; i++){
		if (TagName == "object") {
			//manipulate object elements in all browsers
			if (Show == true){
				Els[i].style.visibility = 'visible';
			}
			else{
				Els[i].style.visibility = 'hidden';
			}
		} 
	}
}



function HideFeedback(){
	document.getElementById('FeedbackDiv').style.display = 'none';
	ShowElements(true, 'input');
	ShowElements(true, 'select');
	ShowElements(true, 'object');
}


//GENERAL UTILITY FUNCTIONS AND VARIABLES

//PAGE DIMENSION FUNCTIONS
function PageDim(){
//Get the page width and height
	this.W = 600;
	this.H = 400;
	this.W = document.getElementsByTagName('body')[0].offsetWidth;
	this.H = document.getElementsByTagName('body')[0].offsetHeight;
}

var pg = null;

function GetPageXY(El) {
	var XY = {x: 0, y: 0};
	while(El){
		XY.x += El.offsetLeft;
		XY.y += El.offsetTop;
		El = El.offsetParent;
	}
	return XY;
}

function GetScrollTop(){
	if (typeof(window.pageYOffset) == 'number'){
		return window.pageYOffset;
	}
	else{
		if ((document.body)&&(document.body.scrollTop)){
			return document.body.scrollTop;
		}
		else{
			if ((document.documentElement)&&(document.documentElement.scrollTop)){
				return document.documentElement.scrollTop;
			}
			else{
				return 0;
			}
		}
	}
}

function GetViewportHeight(){
	if (typeof window.innerHeight != 'undefined'){
		return window.innerHeight;
	}
	else{
		if (((typeof document.documentElement != 'undefined')&&(typeof document.documentElement.clientHeight !=
     'undefined'))&&(document.documentElement.clientHeight != 0)){
			return document.documentElement.clientHeight;
		}
		else{
			return document.getElementsByTagName('body')[0].clientHeight;
		}
	}
}

function TopSettingWithScrollOffset(TopPercent){
	var T = Math.floor(GetViewportHeight() * (TopPercent/100));
	return GetScrollTop() + T; 
}

//CODE FOR AVOIDING LOSS OF DATA WHEN BACKSPACE KEY INVOKES history.back()
var InTextBox = false;

function SuppressBackspace(e){ 
	if (InTextBox == true){return;}
	thisKey = e.keyCode;

	var Suppress = false;

	if (thisKey == 8) {
		Suppress = true;
		e.preventDefault();
	}
}

window.addEventListener('keypress',SuppressBackspace,false);

function ReduceItems(InArray, ReduceToSize){
	var ItemToDump=0;
	var j=0;
	while (InArray.length > ReduceToSize){
		ItemToDump = Math.floor(InArray.length*Math.random());
		InArray.splice(ItemToDump, 1);
	}
}

function Shuffle(InArray){
	var Num;
	var Temp = new Array();
	var Len = InArray.length;

	var j = Len;

	for (var i=0; i<Len; i++){
		Temp[i] = InArray[i];
	}

	for (i=0; i<Len; i++){
		Num = Math.floor(j  *  Math.random());
		InArray[i] = Temp[Num];

		for (var k=Num; k < (j-1); k++) {
			Temp[k] = Temp[k+1];
		}
		j--;
	}
	return InArray;
}

function WriteToInstructions(Feedback) {
	document.getElementById('InstructionsDiv').innerHTML = Feedback;

}




function EscapeDoubleQuotes(InString){
	return InString.replace(/"/g, '&quot;')
}

function TrimString(InString){
        var x = 0;

        if (InString.length != 0) {
                while ((InString.charAt(InString.length - 1) == '\u0020') || (InString.charAt(InString.length - 1) == '\u000A') || (InString.charAt(InString.length - 1) == '\u000D')){
                        InString = InString.substring(0, InString.length - 1)
                }

                while ((InString.charAt(0) == '\u0020') || (InString.charAt(0) == '\u000A') || (InString.charAt(0) == '\u000D')){
                        InString = InString.substring(1, InString.length)
                }

                while (InString.indexOf('  ') != -1) {
                        x = InString.indexOf('  ')
                        InString = InString.substring(0, x) + InString.substring(x+1, InString.length)
                 }

                return InString;
        }

        else {
                return '';
        }
}

function FindLongest(InArray){
	if (InArray.length < 1){return -1;}

	var Longest = 0;
	for (var i=1; i<InArray.length; i++){
		if (InArray[i].length > InArray[Longest].length){
			Longest = i;
		}
	}
	return Longest;
}

//SELECTION OBJECT FOR TYPING WITH KEYPAD
var selObj = null;
            
SelObj = function(box){
	this.box = box;
	this.selStart = this.box.selectionStart;
	this.selEnd = this.box.selectionEnd;
	this.selText = this.box.value.substring(this.selStart, this.selEnd);
	return this;
}

function setSelText(newText){
	var caretPos = this.selStart + newText.length;
	var newValue = this.box.value.substring(0, this.selStart);
	newValue += newText;
	newValue += this.box.value.substring(this.selEnd, this.box.value.length);
	this.box.value = newValue;
	this.box.setSelectionRange(caretPos, caretPos);
	this.box.focus();
}
SelObj.prototype.setSelText = setSelText;

function setSelSelectionRange(start, end){
	this.box.setSelectionRange(start, end);
}
SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

//UNICODE CHARACTER FUNCTIONS
function IsCombiningDiacritic(CharNum){
	var Result = (((CharNum >= 0x0300)&&(CharNum <= 0x370))||((CharNum >= 0x20d0)&&(CharNum <= 0x20ff)));
	Result = Result || (((CharNum >= 0x3099)&&(CharNum <= 0x309a))||((CharNum >= 0xfe20)&&(CharNum <= 0xfe23)));
	return Result;
}

function IsCJK(CharNum){
	return ((CharNum >= 0x3000)&&(CharNum < 0xd800));
}

//SETUP FUNCTIONS
//BROWSER WILL REFILL TEXT BOXES FROM CACHE IF NOT PREVENTED
function ClearTextBoxes(){
	var NList = document.getElementsByTagName('input');
	for (var i=0; i<NList.length; i++){
		if ((NList[i].id.indexOf('Guess') > -1)||(NList[i].id.indexOf('Gap') > -1)){
			NList[i].value = '';
		}
		if (NList[i].id.indexOf('Chk') > -1){
			NList[i].checked = '';
		}
	}
}





//JCLOZE CORE JAVASCRIPT CODE

/* Modification Copyright (c) Michael Rottmeier, March 2005 
 Find-it - Version 3.1.4b for Hot Potatoes v6 
 http://www.teaching-tools.de.vu 
 THIS HEADER MUST STAY UN-TOUCHED */
 /* updated for Hot Potatoes v7 by Agnes Simonet - February 2020 */


var Feedback = '';
var Correct = 'Correct! Well done.';
var Incorrect = 'Some of your answers are incorrect. Incorrect answers have been left in place for you to change.'; 
var MissingMistakes = 'The next correct letter has been added to the answer.';
var YourScoreIs = 'Your score is ';
var CaseSensitive = false;
var Finished = false;
var Locked = false;	// timer specific
var TimeOver = false;
var Output = ''; 	// used for feedback storage

I = new Array();

I[0] = new Array();
I[0][1] = new Array();
I[0][1][0] = new Array();
I[0][1][0][0] = '\u006C\u006F\u006F\u006B\u0065\u0064\u0020\u0075\u0070\u0020\u0074\u006F';
I[0][1][1] = new Array();
I[0][1][1][0]='\u0072\u0065\u0073\u0070\u0065\u0063\u0074\u0065\u0064';
I[0][2]='';

I[1] = new Array();
I[1][1] = new Array();
I[1][1][0] = new Array();
I[1][1][0][0] = '\u0073\u0068\u006F\u0077\u0020\u006F\u0066\u0066';
I[1][1][1] = new Array();
I[1][1][1][0]='\u0062\u006F\u0061\u0073\u0074';
I[1][2]='';

I[2] = new Array();
I[2][1] = new Array();
I[2][1][0] = new Array();
I[2][1][0][0] = '\u0066\u0061\u006C\u006C\u0065\u006E\u0020\u006F\u0075\u0074';
I[2][1][1] = new Array();
I[2][1][1][0]='\u0068\u0061\u0064\u0020\u0061\u006E\u0020\u0061\u0072\u0067\u0075\u006D\u0065\u006E\u0074';
I[2][2]='';

I[3] = new Array();
I[3][1] = new Array();
I[3][1][0] = new Array();
I[3][1][0][0] = '\u0074\u0061\u006B\u0065\u0020\u0061\u0066\u0074\u0065\u0072';
I[3][1][1] = new Array();
I[3][1][1][0]='\u0072\u0065\u0073\u0065\u006D\u0062\u006C\u0065';
I[3][2]='';

I[4] = new Array();
I[4][1] = new Array();
I[4][1][0] = new Array();
I[4][1][0][0] = '\u0067\u0065\u0074\u0020\u006F\u006E\u0020\u0077\u0065\u006C\u006C';
I[4][1][1] = new Array();
I[4][1][1][0]='\u0068\u0061\u0076\u0065\u0020\u0061\u0020\u0067\u006F\u006F\u0064\u0020\u0072\u0065\u006C\u0061\u0074\u0069\u006F\u006E\u0073\u0068\u0069\u0070';
I[4][2]='';


function StartUp(){
	//RemoveBottomNavBarForIE();

//Keypad recovered by Stan 24 Feb 2013
//Show a keypad if there is one	(added bugfix for 6.0.4.12)

	if (document.getElementById('CharacterKeypad') != null){
		document.getElementById('CharacterKeypad').style.display = 'block';
	}
// AS : not working because  : div.Keypad{ display = 'none' in css
//end Keypad recovery
/**/




	Split_Feedback();
	Build_GapText();


}




// CORE JAVASCRIPT FOR JCLOZE DROPDOWN FUNCTIONALITY

GapList = new Array();
// GapList[x][0] = clue button
// GapList[x][1] = State data
// GapList[x][2] = input component in Find-it v3.1b 
var Score = 0;
var TotWrongChoices = 0;

function Create_StateArray(){
	this.ErrorFound = false;
	this.WrongGapValue = '';
	this.GapSolved = false;
	this.Guesses = new Array();
	this.HintsAndChecks = 0;
	this.Score = 0;
}

function Build_GapText(){
	var GSpan = null;
	var InpComp = null;

// first, prepare the gaps
	for (var x=0; x<I.length; x++){
		GSpan = document.getElementById('GapSpan'+x);
		if (GSpan != null){
// remove the input field
			InpComp = GSpan.removeChild(GSpan.getElementsByTagName('input')[0]);
// create the state stuff
			GapList.push(new Array(null, new Create_StateArray(), InpComp));
// put an existing clue button into the GapList array
			if (GSpan.getElementsByTagName('button').length > 0){
				GapList[x][0] = GSpan.removeChild(GSpan.getElementsByTagName('button')[0]);
				}
// remove the </input> tag - and anything else which might be in there
			while (GSpan.childNodes.length > 0){
				GSpan.removeChild(GSpan.firstChild);
				}
// add the wrong text output
			GSpan.appendChild(Create_GapContent(x));
// store the used gap value (wrong text) for tracking purposes
			GapList[x][1].WrongGapValue = GSpan.getElementsByTagName('span')[0].firstChild.nodeValue;
			}
		}

// second, prepare the other text
	var TextBody = document.getElementById('ClozeBody'); //.getElementsByTagName('p')[0];
	TextBody = TextBody.parentNode;
	if (TextBody != null){
		for (var y=0; y<TextBody.childNodes.length; y++){
// markup the text appropriately and replace the old node with the new one
			TextBody.replaceChild(Markup_Text(TextBody.childNodes[y]), TextBody.childNodes[y]);
			}
		}
}

function Create_GapContent(GapId){
	var SpanElm = document.createElement('span');
	SpanElm.className = 'GapSpan';
	SpanElm.onclick = function(){CheckText(true, GapId);}
	//SpanElm.setAttribute("onclick", 'CheckText(true, '+GapId+')');
	//SpanElm.setAttribute("class", 'GapSpan');
	SpanElm.appendChild(document.createTextNode(Get_WrongGapContent(GapId)));
	return SpanElm;
}

function Get_WrongGapContent(GapId){
	// the first alternative gap answer is considered to be the wrong one
	var ReturnVal = I[GapId][1][1][0];	
	
// remove the wrong value from the array
	for (var x=1; x<(I[GapId][1].length-1); x++){
		I[GapId][1][x][0] = I[GapId][1][x+1][0];
		}
	I[GapId][1].length = I[GapId][1].length-1;

	return ReturnVal;
}

function Markup_Text(Node){
	for (var x=0; x<Node.childNodes.length; x++){
//alert(Node.childNodes[x].nodeType);
		switch (Node.childNodes[x].nodeName.toLowerCase()){
			case 'span' : 
					if (Node.childNodes[x].attributes.length > 0){
						if ((Node.childNodes[x].getAttribute('id').substr(0, 7) != 'GapSpan')){
							Node.replaceNode(Markup_Text(Node.childNodes[x]), Node.childNodes[x]);
							}
						} 
				break;
			case 'div' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'p' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'strong' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'em' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'blockquote' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'pre' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'ul' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'ol' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'li' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'sup' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'sub' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'table' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tr' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'td' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'thead' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tbody' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;
			case 'tfoot' : Node.replaceChild(Markup_Text(Node.childNodes[x]), Node.childNodes[x]); break;

			case '#text' : 
				//if (Node.childNodes.length < 1){
					//if (Node.nodeType == 3){
						if (Node.nodeValue != ''){
// add the span tag with the onclick event
							var SpanNode = document.createElement('span');
							SpanNode.className = 'GapSpan';
							SpanNode.onclick = function(){CheckText(false, -1);}
							SpanNode.appendChild(document.createTextNode(Node.childNodes[x].nodeValue));
// replace the old node with the new created node (span + text)
							Node.replaceChild(SpanNode, Node.childNodes[x]);
							}
						//}
					//}
				break;
			}
		}

	return Node;
}

// FEEDBACK ROUTINES
CFb = new Array();
FNoErrorHere = new Array();

//var strFNoErrorHere = 'FNoErrorHere.';
var strFSomeGapsAreIncorrect = 'There are still some incorrect gaps.';
var strFWellDone = 'Well done!';

function Split_Feedback(){
// the feedback bits should look like feedb1## feedb2## feedb3 etc.
//'Correct' Feedback
	var Tmp = Correct.split('##');
	var y = -1;
	for (var x=0; x<Tmp.length; x++){
		if (TrimString(Tmp[x]) != ''){
			if (x == 0){
				strFSomeGapsAreIncorrect = TrimString(Tmp[x]);
				}
			if (x == 1){
				strFWellDone = TrimString(Tmp[x]);
				}
			}
		}

//'Incorrect' Feedback
	Tmp = Incorrect.split('##');
	y = -1;
	for (var x=0; x<Tmp.length; x++){
		if (TrimString(Tmp[x]) != ''){
			y++;
			FNoErrorHere[y] = TrimString(Tmp[x]);
			}
		}
}

function Get_RandomFeedback(){
	var Stuff = '';
// negative feedback
	var x = Math.floor(Math.random()*FNoErrorHere.length);
	Stuff = FNoErrorHere[x];
	return Stuff;
}


// CHECK ROUTINES
function CheckText(GapState,GapId){
	if (Finished == true){return;}

// chosen text is wrong:
	if (GapState==false){
// show feedback
		//ShowMessage(strFNoErrorHere);
		ShowMessage(Get_RandomFeedback());
// penalty
		TotWrongChoices++;
		}
// chosen text is right:
		else{
			CorrectChoice(GapId);
			}
}

function CorrectChoice(GapId){
// the state flag
	GapList[GapId][1].ErrorFound = true;

// show input component
	var GSpan = document.getElementById('GapSpan'+GapId);
	if (GSpan != null){
// remove the onclick event
		GSpan.removeAttribute('onclick');
// remove the text node
		while (GSpan.childNodes.length > 0){
			GSpan.removeChild(GSpan.firstChild);
			}
		GSpan.appendChild(GapList[GapId][2]);
// put the wrong gap value into the input component
		document.getElementById('Gap'+GapId).value = GapList[GapId][1].WrongGapValue;
// add the clue button if it exists
		if (GapList[GapId][0] != null){
// replace the button's caption
			GapList[GapId][0].firstChild.nodeValue = '[ ? ]';
			GSpan.appendChild(GapList[GapId][0]);
			}
		}
}

// GAP VALUE CHECK ROUTINES (mainly based on the original JCloze routines)
var CurrentWord = 0;
function TrackFocus(BoxNumber){
	CurrentWord = BoxNumber;
	InTextBox = true;
}

function LeaveGap(){
	InTextBox = false;
}

function CheckAnswers(){

// check if there is at least one gap visible
	var NumOfVisibleGaps = 0;
	for (var x=0; x<GapList.length; x++){
		if ((GapList[x][1].ErrorFound == true)&&(GapList[x][1].GapSolved == false)){
			NumOfVisibleGaps++;
			}
		}
console.log("NumOfVisibleGaps : " +NumOfVisibleGaps)
	if (NumOfVisibleGaps < 1){return;}

	if (Locked == true){return;}
	SaveCurrentAnswers();
	var AllCorrect = true;

//Check each answer
	for (var x=0; x<GapList.length; x++){
// check only those gaps which are already found
		if (GapList[x][1].ErrorFound == true){
			if (GapList[x][1].GapSolved == false){
//If it's right, calculate its score
				if (CheckAnswer(x, true) > -1){
					var TotalChars = GetGapValue(x).length;
					GapList[x][1].Score = (TotalChars-GapList[x][1].HintsAndChecks)/TotalChars;
					if (GapList[x][1].Score < 0){GapList[x][1].Score = 0;}
					GapList[x][1].GapSolved = true;
//Drop the correct answer into the page, replacing the text box
					Show_GapSolution(x);
//					SetCorrectAnswer(x, GetGapValue(x));
					}
					else{
//Otherwise, increment the checks for this item, as a penalty
						GapList[x][1].HintsAndChecks++;

//then set the flag
						AllCorrect = false;
					}
				}
			}
console.log("x : " +x + "  GapList[x][1].GapSolved : "+GapList[x][1].GapSolved + "   GapList[x][1].Score : "+GapList[x][1].Score )

		}
console.log("CheckExStatus() : " +CheckExStatus())
	Output = '';
// check whether exercise is finished:
// if all errors are found, show final feedback and finish exercise:
	if (CheckExStatus() == true){
		Output += MissingMistakes + Get_NumMissingErr();
		Finished = true;	


		}
// else show number of missing errors:
		else{
// case 1: all visible gaps are answered correctly
			if (AllCorrect == true){
				Output += strFWellDone + '<br />' + MissingMistakes + ' ' + Get_NumMissingErr();
				}
// case 2: some of the found gaps are incorrect
				else{
					Output += strFSomeGapsAreIncorrect + '<br />' + MissingMistakes + ' ' + Get_NumMissingErr();
					}
			}

// calculate the score
	CalculateScore();
// show feedback
	if (Output.length > 1){
		Output += '<br />' + YourScoreIs + ' ' + Score + '%';
		//ShowMessage(Output);
		setTimeout('WriteToInstructions(Output)', 50);
		}
}

function CheckAnswer(GapNum, MarkAnswer){
	var Guess = GetGapValue(GapNum);
	var UpperGuess = '';
	var UpperAnswer = '';
	if (CaseSensitive == false){
		UpperGuess = Guess.toUpperCase();
	}
	else{
		UpperGuess = Guess;
	}
	var Match = -1;
	for (var x=0; x<I[GapNum][1].length; x++){
		if (CaseSensitive == false){
			UpperAnswer = I[GapNum][1][x][0].toUpperCase();
		}
		else{
			UpperAnswer = I[GapNum][1][x][0];
		}
		if (TrimString(UpperGuess) == UpperAnswer){
			Match = x;
			if (MarkAnswer == true){
				GapList[GapNum][1].GapSolved = true;
			}
		}
	}
	return Match;
}

function SaveCurrentAnswers(){
	var Ans = ''
	for (var x=0; x<GapList.length; x++){
		Ans = GetGapValue(x);
		if ((Ans.length > 0)&&(Ans != GapList[x][1].Guesses[GapList[x][1].Guesses.length-1])){
			GapList[x][1].Guesses.push(Ans);
			}
		}
}

function GetGapValue(GapId){
	var RetVal = '';
	if ((GapId<0)||(GapId>=GapList.length)){return RetVal;}
	if (document.getElementById('Gap' + GapId) != null){
		RetVal = document.getElementById('Gap' + GapId).value;
		RetVal = TrimString(RetVal);
		}
		else{
			if (GapList[GapId][1].Guesses.length > 0){
				RetVal = GapList[GapId][1].Guesses[GapList[GapId][1].Guesses.length-1];
				}
			}
	return RetVal;
}

/* NOT USED
function SetCorrectAnswer(GapId, Val){
	if ((GapId<0)||(GapId>=GapList.length)){return;}
	if (document.getElementById('GapSpan' + GapId) != null){
		document.getElementById('GapSpan' + GapId).innerHTML = '<strong>'+Val+'</strong>';
		}
}*/

function CheckExStatus(){
// checks if all errors have been found or not
	var ExFin = true;
	for (var x=0; x<GapList.length; x++){
		if (GapList[x][1].GapSolved == false){
			ExFin = false;
			break;
			}
		}
	return ExFin; 
}

function Get_NumMissingErr(){
// retrieves the number of still 
// missing errors in the text
	var i = 0;
	for (var x=0; x<GapList.length; x++){
		if (GapList[x][1].ErrorFound == false){
			i++;
			}
		}
	return i;
}

function CalculateScore(){
	var TotScore = 0;
	for (var x=0; x<GapList.length; x++){
		TotScore += GapList[x][1].Score;
		}
	Score = Math.floor((TotScore * 100)/(GapList.length + TotWrongChoices));
	if (Score < 0){Score = 0;}
}

// HINT FUNCTIONALITY
function ShowHint(){
	if (Locked == true){return;}
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}

	var HintString = GetHint(CurrGap);

	if (HintString.length > 0){
		SetGapValue(CurrGap, HintString);
		GapList[CurrGap][1].HintsAndChecks++;
	}
}

function FindCurrent() {
	var x = 0;
	FoundCurrent = -1;

//Test the current word:
//If its state is not set to already correct, check the word.
	if (GapList[CurrentWord][1].GapSolved == false){
		if (CheckAnswer(CurrentWord, false) < 0){
			return CurrentWord;
		}
	}
	
	x=CurrentWord + 1;
	while (x<I.length){
		if (GapList[x][1].GapSolved == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}

	x = 0;
	while (x<CurrentWord){
		if (GapList[x][1].GapSolved == false){
			if (CheckAnswer(x, false) < 0){
				return x;
			}
		}
	x++;	
	}
	return FoundCurrent;
}

function GetHint(GapNum){
	Guess = GetGapValue(GapNum);

	if (CheckAnswer(GapNum, false) > -1){return ''}
	RightBits = new Array();
	for (var i=0; i<I[GapNum][1].length; i++){
		RightBits[i] = CheckBeginning(Guess, I[GapNum][1][i][0]);
	}
	var RightOne = FindLongest(RightBits);
	var Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length);
//Add another char if the last one is a space
	if (Result.charAt(Result.length-1) == ' '){
		Result = I[GapNum][1][RightOne][0].substring(0,RightBits[RightOne].length+1);
	}
	return Result;
}

function CheckBeginning(Guess, Answer){
	var OutString = '';
	var i = 0;
	var UpperGuess = '';
	var UpperAnswer = '';

	if (CaseSensitive == false) {
		UpperGuess = Guess.toUpperCase();
		UpperAnswer = Answer.toUpperCase();
	}
	else {
		UpperGuess = Guess;
		UpperAnswer = Answer;
	}

	while (UpperGuess.charAt(i) == UpperAnswer.charAt(i)) {
		OutString += Guess.charAt(i);
		i++;
	}
	OutString += Answer.charAt(i);
	return OutString;
}

function SetGapValue(GNum, Val){
	if ((GNum<0)||(GNum>=I.length)){return;}
	if (document.getElementById('Gap' + GNum) != null){
		document.getElementById('Gap' + GNum).value = Val;
		document.getElementById('Gap' + GNum).focus();
	}
}



function Show_GapSolution(GapId){
// show the correct solution
	var GapSpan = document.getElementById('GapSpan'+GapId);
	if (GapSpan != null){
// remove everything in the GapSpan element
		while (GapSpan.childNodes.length > 0){
			GapSpan.removeChild(GapSpan.firstChild);
			}
// append the text node
		var StrongNode = document.createElement('strong');
		StrongNode.appendChild(document.createTextNode(I[GapId][1][0][0]+' '));
		GapSpan.appendChild(StrongNode);
		GapSpan.setAttribute("class", "GapSpanCorrect");
		}
}

function ShowClue(GapId){
	ShowMessage(I[GapId][2]);
}

function TypeChars(Chars){
	var CurrGap = FindCurrent();
	if (CurrGap < 0){return;}
	if (document.getElementById('Gap' + CurrGap) != null){
		SetGapValue(CurrGap, document.getElementById('Gap' + CurrGap).value + Chars);
	}
}








                function hotkey(event){
                    if (event.keyCode == 191) {ShowHint();}    // ?
                    if (event.keyCode == 19) {CheckAnswers();} // Pause
                    if (event.keyCode == 36){location='index.htm';} // Home
                }
                

//]]>

</script>


</head>

<body onload="StartUp()" id="TheBody" onkeyup="hotkey(event)">

<!-- BeginTopNavButtons -->


<div class="NavButtonBar" id="TopNavBar">




<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndTopNavButtons -->

<div class="Titles">
	<h2 class="ExerciseTitle">UI_Progress_7</h2>

	<h3 class="ExerciseSubtitle">Gap-fill exercise</h3>



</div>

<div id="InstructionsDiv" class="StdDiv">
	<div id="Instructions">Fill in all the gaps, then press "Check" to check your answers. Use the "Hint" button to get a free letter if an answer is giving you trouble. You can also click on the "[?]" button to get a clue. Note that you will lose points if you ask for hints or clues!</div>
</div>


<div id="ContainerDiv">



  <div class="ExerciseContainer">

	


  
	<button id="CheckButton1" class="FuncButton" onclick="CheckAnswers()">&#160;Check&#160;</button>
	
<button class="FuncButton" onclick="ShowHint()">&#160;Hint&#160;</button>
	


	<div id="ClozeDiv">
		<form id="Cloze" method="post" autocomplete="off" onsubmit="return false;">
			<div class="ClozeBody" id="ClozeBody">
			I've always <span class="GapSpan" id="GapSpan0"><input type="text" autocomplete="off" id="Gap0" onfocus="TrackFocus(0)" onblur="LeaveGap()" class="GapBox" size="12"/></span> my aunt as she was a very strong woman<br /><br />I wish you wouldn't <span class="GapSpan" id="GapSpan1"><input type="text" autocomplete="off" id="Gap1" onfocus="TrackFocus(1)" onblur="LeaveGap()" class="GapBox" size="8"/></span> so much about all your money<br /><br />Jack has <span class="GapSpan" id="GapSpan2"><input type="text" autocomplete="off" id="Gap2" onfocus="TrackFocus(2)" onblur="LeaveGap()" class="GapBox" size="10"/></span> with his wife again<br /><br />Do you <span class="GapSpan" id="GapSpan3"><input type="text" autocomplete="off" id="Gap3" onfocus="TrackFocus(3)" onblur="LeaveGap()" class="GapBox" size="10"/></span> your mother at all?<br /><br />I think I <span class="GapSpan" id="GapSpan4"><input type="text" autocomplete="off" id="Gap4" onfocus="TrackFocus(4)" onblur="LeaveGap()" class="GapBox" size="11"/></span> with most of my family
			</div>
		</form>
	</div>

	

	<button id="CheckButton2" class="FuncButton" onclick="CheckAnswers()">&nbsp;Check&nbsp;</button>

	
<button class="FuncButton" onclick="ShowHint()">&#160;Hint&#160;</button>
	

  </div>

</div>

<div class="Feedback" id="FeedbackDiv">
<div class="FeedbackText" id="FeedbackContent"></div>
<button id="FeedbackOKButton" class="FuncButton" onclick="HideFeedback(); return false;">&nbsp;OK&nbsp;</button>
</div>

<!-- BeginBottomNavButtons -->


<div class="NavButtonBar" id="BottomNavBar">




<button class="NavButton" onclick="location='contents.htm'; return false;"> Index </button>



<button class="NavButton" onclick="location='nextpage.htm'; return false;">=&gt;</button>


</div>



<!-- EndBottomNavButtons -->

<!-- BeginSubmissionForm -->

<!-- EndSubmissionForm -->

</body>

</html>
